#include <cstdio>
#include <vector>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

const int MAXD = 1001;
const int MAXN = 100001;
const int MAXM = 100001;
const int INF = ~0u >> 2;

struct Edge{
	int node, next, flow, opp;
}e[MAXM];

struct Road{
	int x, y;
}r[MAXM];

int n, m, t, sumA, sumB, cnt[MAXD][MAXD], a[MAXD], b[MAXD], h[MAXN], num[MAXM], cur[MAXN], gap[MAXN], d[MAXN], pre[MAXN];

void addedge(int x, int y, int f) {
	t++; e[t] = (Edge){y, h[x], f, t + 1}; h[x] = t;
	t++; e[t] = (Edge){x, h[y], 0, t - 1}; h[y] = t;
}
int Maxflow_Isap(int s, int t, int n) {
    memset(pre, -1, sizeof(pre));
    memset(d, 0, sizeof(d));
    memset(gap, 0, sizeof(gap));
    for (int i = 1; i <= n; i++) cur[i] = h[i];
    gap[0] = n;
    int u = pre[s] = s, v, maxflow = 0;
    while (d[s] < n) {
    	v = n + 1;
    	for (int i = cur[u]; i; i = e[i].next)
    		if (e[i].flow && d[u] == d[e[i].node] + 1) {
        		v = e[i].node; cur[u] = i; break;
        	}
		if (v <= n) {
    		pre[v] = u; u = v;
        	if (v == t) {
				int dflow = INF, p = t; u = s;
				while (p != s) {
					p = pre[p];
					dflow = min(dflow, e[cur[p]].flow);
          		}
				maxflow += dflow; p = t;
				while (p != s) {
					p = pre[p];
					e[cur[p]].flow -= dflow;
					e[e[cur[p]].opp].flow += dflow;
          		}
        	}
      	}
		else{
        	int mindist = n + 1;
			for (int i = h[u]; i; i = e[i].next)
				if (e[i].flow && mindist > d[e[i].node]) {\
					mindist=d[e[i].node];cur[u]=i;
				}
			if (!--gap[d[u]]) return maxflow;
        	gap[d[u] = mindist + 1]++; u = pre[u];
		}
    }
    return maxflow;
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) {
		scanf("%d", a + i);
		addedge(2 * n + 1, i, a[i]);
		sumA += a[i];
	}
	for (int i = 1; i <= n; i++) {
		scanf("%d", b + i);
		addedge(n + i, 2 * n + 2, b[i]);
		sumB += b[i];
	}
	for (int i = 1; i <= n; i++) {
		addedge(i, n + i, INF);
		num[2 * m + i] = t;
	}
	for (int i = 1; i <= m; i++) {
		scanf("%d%d", &r[i].x, &r[i].y);
		addedge(r[i].x, n + r[i].y, INF);
		num[i] = t;
		addedge(r[i].y, n + r[i].x, INF);
		num[m + i] = t;
	}
	int maxflow = Maxflow_Isap(2 * n + 1, 2 * n + 2, 2 * n + 2);
	if (maxflow == sumA && maxflow == sumB) {
		printf("YES\n");
		for (int i = 1; i <= m; i++) {
			cnt[r[i].x][r[i].y] += e[num[i]].flow;
			cnt[r[i].y][r[i].x] += e[num[m + i]].flow;
		}
		for (int i = 1; i <= n; i++)
			cnt[i][i] += e[num[2 * m + i]].flow;
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= n; j++)
				printf("%d%c", cnt[i][j], " \n"[j == n]);
	}
	else printf("NO\n");
	return 0;
}
