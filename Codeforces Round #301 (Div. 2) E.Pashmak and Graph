#include <map>
#include <queue>
#include <cstdio>
#include <vector>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

const int MAXB = 600001;
const int MAXD = 600001;
const int MAXM = 2000001;

struct Edge{
	int node, next, dist;
}e[MAXM];

struct Road{
	int x, y, w;
}r[MAXB];

int n, m, t, h[MAXD], deg[MAXD], d[MAXD], dp[MAXD];
vector<int> g[MAXB];
bool v[MAXD];

bool cmp(const int &a, const int &b) {return r[a].w < r[b].w;}

void addedge(int x, int y, int c) {
	//printf("Addedge(%d, %d, %d)\n", x, y, c);
	t++; e[t] = (Edge){y, h[x], c}; h[x] = t; deg[y]++;
}

int calc(int x) {
	if (v[x]) return dp[x];
	v[x] = true;
	for (int i = h[x]; i; i = e[i].next) {
		dp[x] = max(dp[x], calc(e[i].node) + e[i].dist);
	}
	return dp[x];
}

int main() {
	freopen("E.in", "r", stdin);
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= m; i++) {
		scanf("%d%d%d", &r[i].x, &r[i].y, &r[i].w);
		g[r[i].x].push_back(i);
	}
	for (int i = 1; i <= n; i++) {
		sort(g[i].begin(), g[i].end(), cmp);
		for (int j = 0; j < (int)g[i].size() - 1; j++)
			addedge(g[i][j], g[i][j + 1], 0);
		for (int j = 0; j < (int)g[i].size(); j++) 
			addedge(g[i][j], m + g[i][j], 1);
	}
	for (int i = 1; i <= m; i++) {
		int now = r[i].y;
		vector<int>::iterator pos = upper_bound(g[now].begin(), g[now].end(), i, cmp);
		if (pos != g[now].end()) {
			addedge(m + i, *pos, 0);
		}
	}
	int ans = 0;
	for (int i = 1; i <= 2 * m; i++)
		if (!deg[i]) {
			ans = max(ans, calc(i));
		}
	printf("%d\n", ans);
	return 0;
}
